#version 400 core

const int MAX_LIGHTS = 4;

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[MAX_LIGHTS];
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[MAX_LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[MAX_LIGHTS];

void main(void) {

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVecToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0, 0.0, 0.0);
    vec3 totalSpecular = vec3(0.0, 0.0, 0.0);
    for(int i = 0; i < MAX_LIGHTS; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance + (attenuation[i].z * distance * distance));
        vec3 unitToLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitToLightVector);
        float brightness = max(nDot1, 0.0);
        vec3 lightDirection = -unitToLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);


        float specularFactor = dot(reflectedLightDirection, unitVecToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampendFactor = pow(specularFactor, shineDamper);

        totalSpecular = totalSpecular + (dampendFactor * lightColor[i] * reflectivity)/attFactor;
        totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
    }

    totalDiffuse = max(totalDiffuse, 0.2);



    vec4 textureColor = texture(textureSampler, pass_textureCoords);

    if(textureColor.a < 0.5) {
        discard;
    }
    out_color = vec4(totalDiffuse, 1.0) * textureColor  + vec4(totalSpecular, 1.0);

    //Terrain Fog (only disables the RENDERING not the CALCULATION;
    //out_color = mix(vec4(skyColor, 1.0), out_color, visibility);
}