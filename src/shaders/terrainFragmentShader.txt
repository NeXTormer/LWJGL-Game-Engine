#version 400 core

const int MAX_LIGHTS = 4;

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[MAX_LIGHTS];
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform vec3 lightColor[MAX_LIGHTS];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[MAX_LIGHTS];

void main(void) {

    vec4 blendMapColor = texture(blendMap, pass_textureCoords);

    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = pass_textureCoords * 40;
    vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
    vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
    vec3 unitVecToCamera = normalize(toCameraVector);
    vec3 unitNormal = normalize(surfaceNormal);

    vec3 totalDiffuse = vec3(0.0, 0.0, 0.0);
    vec3 totalSpecular = vec3(0.0, 0.0, 0.0);


    for(int i = 0; i < MAX_LIGHTS; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitToLightVector = normalize(toLightVector[i]);

        float nDot1 = dot(unitNormal, unitToLightVector);
        float brightness = max(nDot1, 0.0);


        vec3 lightDirection = -unitToLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

        float specularFactor = dot(reflectedLightDirection, unitVecToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampendFactor = pow(specularFactor, shineDamper);

        totalSpecular = totalSpecular + (dampendFactor * lightColor[i] * reflectivity)/attFactor;
        totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;

    }

    totalDiffuse = max(totalDiffuse, 0.2);




    out_color = vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);

    //Terrain Fog (only disables the RENDERING not the CALCULATION;
    //out_color = mix(vec4(skyColor, 1.0), out_color, visibility);


}